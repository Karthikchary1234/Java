@Library('my-shared-library') _

pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: 'AWS Account ID', defaultValue: '964164841833')
        string(name: 'Region', description: 'Region of ECR', defaultValue: 'us-east-1')
        string(name: 'ECR_REPO_NAME', description: 'name of the ECR', defaultValue: 'emmydevops')
    }

    stages{ 

        stage("Git Checkout"){
        when { expression { params.action == 'create' } }

            steps{
            gitCheckout(
                        branch: "devops",
                        url: "https://github.com/EmmanuelAudu/java_ap.git"
                    )
                
            }
        }

         stage("Unit Test Maven"){
         when { expression { params.action == 'create' } }
             steps{
                 script{
                     mvnTest()
                 }
             }
         }    
        stage("Integration Test Maven"){
        when { expression { params.action == 'create' } }
            steps{
                script{
                    mvnIntegrationTest()
                }
            }
        }  
        stage("Static code analysis: Sonarqube"){
        when { expression { params.action == 'create' } }
            steps{
                script{

                def SonarQubecredentialsId = 'sonar-api'
                   statiCodeAnalysis(SonarQubecredentialsId)
                }
            }
        }          
        stage("Quality Gate Status Check: Sonarqube"){
        when { expression { params.action == 'create' } }
            steps{
                script{

                def SonarQubecredentialsId = 'sonar-api'
                   QualityGateStatus(SonarQubecredentialsId)
                }
            }
        }    
        stage("Maven Build: maven"){
        when { expression { params.action == 'create' } }
            steps{
                script{
                    
                    mvnBuild()
                }
            }
        }
         stage("Docker Image Build: ECR"){
        when { expression { params.action == 'create' } }
            steps{
                script{
                    
                    dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
            }
        }   
       // stage("Docker Image Scan: trivy"){
        // when { expression { params.action == 'create' } }
        //     steps{
        //         script{
                    
        //             dockerImageScan("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
        //         }
        //     }
        // }    
        stage("Docker Image Push: ECR"){
        when { expression { params.action == 'create' } }
            steps{
                script{
                    
                    dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
            }
        }    
        stage("Docker Image Cleanup: ECR"){
        when { expression { params.action == 'create' } }
            steps{
                script{
                    
                    dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
            }
        }        
    }
}  
